The changes are as follows: ${diff}

Write a commit message in the selected language, which is currently set to ${language}. Follow the rules below:

1. Separate the subject (title) and body with a blank line. Ensure there is a \n between the title and the body.
2. The subject must be under 50 characters, with the first letter capitalized and without a period at the end.
3. **Write the subject in the imperative mood using strong, action-oriented verbs** (e.g., 'Add', 'Fix', 'Update'), and avoid past tense.
4. Focus on explaining **what** was changed and **why** the change was necessary. Keep the message concise, with no line breaks or unnecessary details.
5. The body is optional but can include further explanation of the change, such as **why** or **how** the change was made. Make sure the body text is short and succinct.
6. The commit message should use the following structure:
   - Type: Subject (#IssueNumber) (if applicable)
   - Optional body: Short explanation of the change

Commit Types:
${commitTypes}
7. Use the appropriate commit type based on the changes made.

8. Extract the issue number from the branch name if possible. The branch name is: ${branchName}
   - If the branch name contains multiple numbers, select the number most likely to be the issue number.
     - For `feat/login2-31`, the issue number is 31.
     - For `version1.3.4-32`, the issue number is 32.
     - For `feature/update-v2-100`, the issue number is 100.
     - For `feature/update-v2`, the issue number not applicable.
   - If the branch name is 'main', 'develop', or doesn't contain a number, do not include an issue number.

9. Do not fabricate information based on the branch name. Regardless of the branch name, the commit message should accurately reflect the actual changes made. Even if the branch name suggests a specific feature or fix, ensure that the commit message only includes information about the real changes. If the changes are simple, describe them truthfully without embellishment. When translating to other languages, prioritize natural and professional language usage over literal translations.

Example Commit Messages:

feat: Add OAuth2 support for Google and Facebook (#15)

- Google and Facebook OAuth2 authentication implemented.
- Updated login flow to handle OAuth2 tokens.

fix: Resolve layout issues on mobile view (#1253)

- Adjusted CSS to fix layout issues on smaller screens.  
- Improved responsiveness for touch devices.

refactor: Optimize query performance for large datasets

- Refactored SQL queries for datasets over 1M records.  
- Reduced query time by 30%.

fix: Address multiple bugs in file upload functionality (#341)

- Fixed edge cases causing file uploads to fail on large files.  
- Improved error handling for unsupported file types.  
- Added progress indicators during upload process.  
- Resolved memory leak issue that occurred when multiple files were uploaded simultaneously.  
- Updated dependencies to the latest version to ensure compatibility.

The commit message must be written in ${language}. (You may use English words if necessary for context, e.g., technical terms or common development terms.) It must not include any backticks.